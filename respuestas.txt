21. "\t\n" con dobles comillas se muestra literalmente por pantalla. Con '\t\n' se añaden, además, barras "\" delante de los caracteres especiales para evitar confusión.

22. %q hace la función de comillas simples y se añaden, además, barras "\" delante de los caracteres especiales para evitar confusión.

23. %Q hace la función de dobles comillas y se muestra literalmente lo que se pone por pantalla.

24. En c queda --4--\n--2--\n. Con <<HERE se introduce, como si fueran dobles comillas, todas las expresiones siguientes.

25. En c queda --\#{a}--\n--#{b}--\n. Con <<'HERE' se introduce, como si fueran comillas simples, todas las expresiones anteriores. En este caso, no se evaluan las expresiones como #{a}.

26. Los valores entre corchetes [x,y] hace que se muestren y caracteres desde la posición x. Los valores negativos atienden a empezar desde la derecha.
 - Por ejemplo: s[0,2] mostrará "he". Desde la posición 0 se muestran 2 carácteres.
27. En g queda "hello world" pues se ha hecho una concatenación.

28. En e queda "...". Se repite 3 veces lo anterior.

29. El resultado es "2 2 2 ". Se aumenta el valor de "a" y se repite 3 veces las expresión.

30. Crea un array de palabras sin necesidad de usar comillas simples.

31. Crea un array de palabras sin tener en cuenta que sea caracteres especiales. Los entiende de forma literal y usando la barra para evitar su confusión.

32. Crea un array de palabras sin tener en cuenta que sea caracteres especiales. Los entiende de forma literal, sin usar la barra.

33. Crea un array de 3 objetos nil.

34. Se crea un array de 3 ceros. En los parámetros de new se indica el número de elementos y el valor de cada uno de ellos.

35. Crea un array b copia del array x pasado por parámetros.

36. Crea un array de tamaño 3 y va metiendo los valores del iterador i (desde 0) multplicados por 2.

37. => ["b"]
    => ["d", "e"]
    => ["a", "b", "c"]
    => ["a", "b"]
    => ["d", "e"]

38. => ["A", "B", "c", "d", "e"]
    => ["A", "B", "C", "D", "E"]
    => [1, 2, 3, "A", "B", "C", "D", "E"]
    => [3, "A", "B", "C", "D", "E"]
    => [3, "A", "B", "C", "D", "Z"]
    => [3, "A", "B", "C", nil]

39. => [1, 2, 3, 4]
    => [1, 2, 3, 4, 4, 5]
    => [1, 2, 3, 4, 4, 5, [6, 7, 8]]
    - No permite hacer a = a + 9, pues "a" es un array por lo que no se le puede simplemente añadir el 9 para concatenar. Se debe hacer así: a = a + [9]

40. => ["a", "b", "c", "b", "a"]
    => ["a", "a"]

41. z = [0, 0, 0, 0, 0, 0, 0, 0]


42. => [1]
    => [1, 2, 3]
    => [1, 2, 3, [4, 5, 6]]
    => [1, 2, 3, [4, 5, 6], 7, 8]

43. => [1, 2, 3, 4, 5]
    => [5, 4, 3, 2, 1]
    => [2, 3, 4]
    => [4, 3, 2]

44. => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    => [1, 2, 3, 4, 5, 6, 7, 8, 9]
    => false
    => true
    - 1 3 5 7 9 => 1...10
    - No permite crear ese array con el rango 1..3, pues 1..3 no es una clase y, por lo tanto, no se puede usar el método to_a.

45. => true
    => true
    => true

46. => TrueClass
    => FalseClass
  - hello 
    => nil
  - => nil
  - (irb):29: warning: string literal in condition
    hello
    => nil

47. => Symbol
    => false
    => true
    => Symbol
    => true
    => true

48. Rub=> nil
    RubJava=> nil

49. => "3 rubies"

50. => [4, 5]
    => 5
    => [1, 2, 3]

51. => [:a, :b]
    => [1, 2]
    => {:a=>1, :b=>2, :c=>3}
    => {:a=>1, :b=>2, :c=>3}
    => {:a=>1}

52. Se da un error, pues se pasa un yield con 2 parámetros, pero no hay ningún bloque para que se haga la sustitución.

53. Con Hash.new(0), se inicializa un hash y se establece que la respuesta por defecto a cualquier consulta sea 0. Con counts = {}, se establece que la respuesta por defecto a cualquier consulta sea nil.

54. => ["hello", "world", "hello", "LPP"]

55. Se crea un un hash "c" y se imprimen por pantalla las claves ordenadas de mayor a menor.

